import React, { useState, useEffect } from 'react';
import { MapContainer, TileLayer, Marker, useMap, Popup } from 'react-leaflet';
import 'leaflet/dist/leaflet.css';
import L from 'leaflet';

// Fix default marker icons
delete L.Icon.Default.prototype._getIconUrl;
L.Icon.Default.mergeOptions({
    iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png',
    iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png',
    shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',
});

const MapView = ({ center }) => {
    const map = useMap();
    useEffect(() => {
        map.setView(center, map.getZoom());
    }, [center, map]);
    return null;
};

const LiveTracking = () => {
    const [position, setPosition] = useState([51.505, -0.09]);
    const [address, setAddress] = useState('Loading address...');
    const [loading, setLoading] = useState(true);

    // Reverse geocoding function
    const getAddressFromCoords = async (lat, lng) => {
        try {
            const response = await fetch(
                `https://nominatim.openstreetmap.org/reverse?lat=${lat}&lon=${lng}&format=json`
            );
            const data = await response.json();
            return data.display_name;
        } catch (error) {
            console.error('Error getting address:', error);
            return 'Address not found';
        }
    };

    useEffect(() => {
        const updatePositionAndAddress = async (pos) => {
            const { latitude, longitude } = pos.coords;
            setPosition([latitude, longitude]);
            const address = await getAddressFromCoords(latitude, longitude);
            setAddress(address);
            setLoading(false);
        };

        navigator.geolocation.getCurrentPosition(
            updatePositionAndAddress,
            (err) => {
                console.error(err);
                setLoading(false);
            },
            { enableHighAccuracy: true }
        );

        const intervalId = setInterval(() => {
            navigator.geolocation.getCurrentPosition(
                updatePositionAndAddress,
                (err) => console.error(err),
                { enableHighAccuracy: true }
            );
        }, 1000);

        return () => clearInterval(intervalId);
    }, []);

    const handleMapClick = async (e) => {
        const { lat, lng } = e.latlng;
        setPosition([lat, lng]);
        const address = await getAddressFromCoords(lat, lng);
        setAddress(address);
    };

    return (
        <div className="w-full h-screen relative">
            {loading && (
                <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 z-20 bg-white p-2 rounded-lg shadow">
                    Loading location...
                </div>
            )}
            <MapContainer
                center={position}
                zoom={18}
                scrollWheelZoom={true}
                style={{ height: "100%", width: "100%" }}
                onClick={handleMapClick}
            >
                <MapView center={position} />
                <TileLayer
                    url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
                    attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
                />
                <Marker 
                    position={position}
                    draggable={true}
                    eventHandlers={{
                        dragend: async (e) => {
                            const marker = e.target;
                            const position = marker.getLatLng();
                            setPosition([position.lat, position.lng]);
                            const address = await getAddressFromCoords(position.lat, position.lng);
                            setAddress(address);
                        },
                    }}
                >
                    <Popup>
                        <div className="text-sm">
                            <p className="font-bold">Your Location</p>
                            <p className="mt-1">{address}</p>
                            <p className="mt-1">
                                Lat: {position[0].toFixed(6)}<br />
                                Lng: {position[1].toFixed(6)}
                            </p>
                        </div>
                    </Popup>
                </Marker>
            </MapContainer>
        </div>
    );
};

export default LiveTracking;
